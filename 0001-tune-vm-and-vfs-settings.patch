From 0a748e7a6285faf697d7fe5493aeb6bfb133ff7f Mon Sep 17 00:00:00 2001
From: torvic9 <torvic9@mailbox.org>
Date: Sun, 22 Dec 2019 18:38:25 +0100
Subject: [PATCH] tune vm and vfs settings

Signed-off-by: torvic9 <torvic9@mailbox.org>
---
 fs/dcache.c         | 2 +-
 include/linux/mm.h  | 2 +-
 mm/page-writeback.c | 4 ++--
 mm/vmscan.c         | 2 +-
 4 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/fs/dcache.c b/fs/dcache.c
index e88cf0554e65..e282ee1d74e5 100644
--- a/fs/dcache.c
+++ b/fs/dcache.c
@@ -69,11 +69,11 @@
  *       dentry->d_lock
  *
  * If no ancestor relationship:
  * arbitrary, since it's serialized on rename_lock
  */
-int sysctl_vfs_cache_pressure __read_mostly = 100;
+int sysctl_vfs_cache_pressure __read_mostly = 70;
 EXPORT_SYMBOL_GPL(sysctl_vfs_cache_pressure);
 
 __cacheline_aligned_in_smp DEFINE_SEQLOCK(rename_lock);
 
 EXPORT_SYMBOL(rename_lock);
diff --git a/include/linux/mm.h b/include/linux/mm.h
index a2adf95b3f9c..d7823ee21744 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -2414,11 +2414,11 @@ extern vm_fault_t filemap_page_mkwrite(struct vm_fault *vmf);
 /* mm/page-writeback.c */
 int __must_check write_one_page(struct page *page);
 void task_dirty_inc(struct task_struct *tsk);
 
 /* readahead.c */
-#define VM_READAHEAD_PAGES	(SZ_128K / PAGE_SIZE)
+#define VM_READAHEAD_PAGES	(SZ_512K / PAGE_SIZE)
 
 int force_page_cache_readahead(struct address_space *mapping, struct file *filp,
 			pgoff_t offset, unsigned long nr_to_read);
 
 void page_cache_sync_readahead(struct address_space *mapping,
diff --git a/mm/page-writeback.c b/mm/page-writeback.c
index 50055d2e4ea8..68ff28d67c8a 100644
--- a/mm/page-writeback.c
+++ b/mm/page-writeback.c
@@ -69,11 +69,11 @@ static long ratelimit_pages = 32;
 /* The following parameters are exported via /proc/sys/vm */
 
 /*
  * Start background writeback (via writeback threads) at this percentage
  */
-int dirty_background_ratio = 10;
+int dirty_background_ratio = 5;
 
 /*
  * dirty_background_bytes starts at 0 (disabled) so that it is a function of
  * dirty_background_ratio * the amount of dirtyable memory
  */
@@ -97,11 +97,11 @@ int vm_dirty_ratio = 20;
 unsigned long vm_dirty_bytes;
 
 /*
  * The interval between `kupdate'-style writebacks
  */
-unsigned int dirty_writeback_interval = 5 * 100; /* centiseconds */
+unsigned int dirty_writeback_interval = 10 * 100; /* centiseconds */
 
 EXPORT_SYMBOL_GPL(dirty_writeback_interval);
 
 /*
  * The longest time for which data is allowed to remain dirty
diff --git a/mm/vmscan.c b/mm/vmscan.c
index ee4eecc7e1c2..6d28dee5cbfb 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -162,11 +162,11 @@ struct scan_control {
 #endif
 
 /*
  * From 0 .. 100.  Higher means more swappy.
  */
-int vm_swappiness = 60;
+int vm_swappiness = 30;
 /*
  * The total number of pages which are beyond the high watermark within all
  * zones.
  */
 unsigned long vm_total_pages;
-- 
2.24.1

